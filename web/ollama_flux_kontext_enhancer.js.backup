/**
 * OllamaFluxKontextEnhancer 前端JavaScript扩展
 * 
 * 实现动态Ollama模型选择和参数交互
 * 基于comfyui-ollama参考项目的实现模式
 */

import { app } from "../../scripts/app.js";

/**
 * 获取可用的Ollama模型列表 - 通过ComfyUI后端API
 * @param {string} url - Ollama服务地址
 * @returns {Promise<Array<string>>} 模型列表
 */
async function fetchOllamaModels(url) {
    try {
        console.log(`🔄 正在通过后端API获取Ollama模型列表: ${url}`);
        
        // 额外的URL验证和警告
        if (!url) {
            console.error("❌ URL参数为空！");
            url = "http://127.0.0.1:11434";
        }
        
        if (url === "http://127.0.0.1:11434") {
            console.warn("⚠️ 使用默认localhost地址，如果在云端环境中可能连接失败");
        }
        
        // 通过ComfyUI后端API获取模型，避免CORS问题
        const response = await fetch('/ollama_flux_enhancer/get_models', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                url: url || "http://127.0.0.1:11434"
            })
        });
        
        if (!response.ok) {
            throw new Error(`Backend API error: ${response.status} ${response.statusText}`);
        }
        
        const responseData = await response.json();
        
        // 检查是否是错误响应
        if (responseData.error) {
            console.error(`❌ 后端API返回错误: ${responseData.error}`);
            console.error(`🔍 错误详情: ${responseData.details}`);
            throw new Error(`Backend API error: ${responseData.error}`);
        }
        
        // 处理正常的模型列表响应
        const modelNames = Array.isArray(responseData) ? responseData : responseData.models || [];
        
        console.log(`✅ 通过后端API成功获取${modelNames.length}个模型:`, modelNames);
        return modelNames;
        
    } catch (error) {
        console.error(`❌ Failed to fetch Ollama models via backend API: ${error.message}`);
        console.log(`ℹ️ 尝试回退到后端模型检测...`);
        return [];
    }
}

/**
 * 更新模型选择框的选项
 * @param {Object} widget - 模型选择widget
 * @param {Array<string>} models - 模型列表
 */
function updateModelWidget(widget, models) {
    if (!widget || !Array.isArray(models)) {
        console.warn("⚠️ 无效的widget或模型列表");
        return;
    }

    // 保存当前选中的模型
    const currentModel = widget.value;
    
    // 更新选项
    widget.options.values = models;
    
    // 恢复选中的模型（如果还存在）或选择第一个
    if (models.length > 0) {
        if (models.includes(currentModel)) {
            widget.value = currentModel;
        } else {
            widget.value = models[0];
        }
        console.log(`🎯 模型选择更新为: ${widget.value}`);
    } else {
        widget.value = "";
        console.warn("⚠️ 没有可用的模型");
    }
}

/**
 * 创建模型刷新按钮
 * @param {Object} node - ComfyUI节点实例
 * @param {Object} modelWidget - 模型选择widget
 * @param {Object} urlWidget - URL输入widget
 * @returns {Object} 刷新按钮widget
 */
function createRefreshButton(node, modelWidget, urlWidget) {
    try {
        console.log("🔄 Creating model refresh button");
        
        // 创建刷新按钮widget
        const refreshButton = node.addWidget("button", "🔄 Refresh Models", "refresh", () => {
            refreshModels(node, modelWidget, urlWidget);
        });
        
        // 设置按钮样式
        refreshButton.size = [150, 25];
        refreshButton.tooltip = "Click to refresh Ollama model list and get newly installed models";
        
        console.log("✅ Model refresh button created successfully");
        return refreshButton;
        
    } catch (error) {
        console.error("❌ Failed to create refresh button:", error);
        return null;
    }
}

/**
 * 刷新模型列表
 * @param {Object} node - ComfyUI节点实例
 * @param {Object} modelWidget - 模型选择widget
 * @param {Object} urlWidget - URL输入widget
 */
async function refreshModels(node, modelWidget, urlWidget) {
    try {
        console.log("🔄 Starting model list refresh via backend API");
        
        // 获取当前URL - 云端环境优化版本
        let currentUrl = "http://127.0.0.1:11434"; // 默认值
        
        // 方法1: 从URL widget获取
        if (urlWidget && urlWidget.value && urlWidget.value.trim() !== "") {
            currentUrl = urlWidget.value.trim();
            console.log(`📍 使用URL widget配置: ${currentUrl}`);
        } else {
            // 方法2: 从所有widgets中查找URL
            console.log("🔍 URL widget为空，搜索所有widgets...");
            if (node.widgets) {
                for (let i = 0; i < node.widgets.length; i++) {
                    const widget = node.widgets[i];
                    if ((widget.name === "url" || widget.name === "ollama_url") && widget.value && widget.value.trim() !== "") {
                        currentUrl = widget.value.trim();
                        console.log(`📍 在widgets[${i}]中找到URL: ${currentUrl}`);
                        break;
                    }
                }
            }
            
            // 方法3: 检查节点属性
            if (currentUrl === "http://127.0.0.1:11434" && node.properties) {
                if (node.properties.ollama_url) {
                    currentUrl = node.properties.ollama_url;
                    console.log(`📍 使用节点属性URL: ${currentUrl}`);
                }
            }
            
            // 方法4: 尝试从ComfyUI配置中获取
            if (currentUrl === "http://127.0.0.1:11434") {
                // 检查是否有全局配置
                const possibleUrls = [
                    "http://localhost:11434",
                    "http://ollama:11434", 
                    "http://127.0.0.1:11434"
                ];
                
                // 如果在云端环境，尝试非localhost地址
                if (window.location.hostname !== "localhost" && window.location.hostname !== "127.0.0.1") {
                    console.log("🌐 检测到云端环境，优先尝试非localhost地址");
                    currentUrl = "http://localhost:11434"; // 云端localhost
                }
            }
        }
        
        console.log(`🎯 最终使用的URL: ${currentUrl}`);
        
        // 显示加载状态
        if (modelWidget) {
            const originalOptions = modelWidget.options.values;
            modelWidget.options.values = ["🔄 Refreshing models..."];
            modelWidget.value = "🔄 Refreshing models...";
            
            // 强制重绘
            if (node.graph && node.graph.canvas) {
                node.graph.canvas.setDirty(true);
            }
        }
        
        // 通过后端API获取新的模型列表
        const models = await fetchOllamaModels(currentUrl);
        
        if (models && models.length > 0) {
            // 添加刷新选项到列表开头
            const updatedModels = ["🔄 Refresh model list", ...models];
            updateModelWidget(modelWidget, updatedModels);
            
            // 选择第一个实际模型（跳过刷新选项）
            if (modelWidget && models.length > 0) {
                modelWidget.value = models[0];
            }
            
            console.log(`✅ Successfully refreshed model list via backend API, found ${models.length} models`);
            
            // 显示成功通知
            showRefreshNotification(node, `✅ 成功刷新！获取到 ${models.length} 个模型`, "success");
            
        } else {
            // 处理无模型情况 - 提供更详细的错误信息
            const errorMessage = "❌ No models found - Check Ollama service";
            updateModelWidget(modelWidget, [errorMessage]);
            console.warn("⚠️ No models retrieved via backend API");
            
            // 显示详细的故障排除信息
            showRefreshNotification(node, 
                "❌ 未找到模型\n请检查：\n1. Ollama服务是否运行\n2. 是否安装了模型\n3. URL配置是否正确", 
                "warning"
            );
        }
        
    } catch (error) {
        console.error("❌ Failed to refresh model list via backend API:", error);
        
        // 恢复错误状态
        if (modelWidget) {
            updateModelWidget(modelWidget, ["❌ Refresh failed - Backend API error"]);
        }
        
        // 显示错误通知
        showRefreshNotification(node, 
            `❌ 刷新失败：${error.message}\n这通常是由于CORS政策或网络连接问题`, 
            "error"
        );
    }
}

/**
 * 显示刷新通知
 * @param {Object} node - ComfyUI节点实例
 * @param {string} message - 通知消息
 * @param {string} type - 通知类型 (success/warning/error)
 */
function showRefreshNotification(node, message, type) {
    try {
        // 在控制台显示消息
        if (type === "success") {
            console.log(`✅ ${message}`);
        } else if (type === "warning") {
            console.warn(`⚠️ ${message}`);
        } else {
            console.error(`❌ ${message}`);
        }
        
        // 如果有ComfyUI的通知系统，使用它
        if (typeof app !== 'undefined' && app.ui && app.ui.dialog) {
            // 短暂显示通知，不阻塞用户操作
            const shortMessage = message.split('\n')[0]; // 只显示第一行
            setTimeout(() => {
                if (app.ui.dialog.show) {
                    // 使用ComfyUI的通知系统
                    const notification = document.createElement('div');
                    notification.style.cssText = `
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        padding: 10px 15px;
                        border-radius: 5px;
                        color: white;
                        font-size: 14px;
                        z-index: 10000;
                        max-width: 300px;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                        background-color: ${type === 'success' ? '#28a745' : type === 'warning' ? '#ffc107' : '#dc3545'};
                    `;
                    notification.textContent = shortMessage;
                    document.body.appendChild(notification);
                    
                    // 3秒后自动移除
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 3000);
                }
            }, 100);
        }
        
    } catch (e) {
        console.log("无法显示通知:", e);
    }
}

/**
 * 创建状态指示器
 * @param {Object} node - ComfyUI节点实例
 * @returns {Object} 状态指示器widget
 */
function createStatusIndicator(node) {
    try {
        const statusWidget = node.addWidget("text", "📊 Connection Status", "disconnected", () => {});
        statusWidget.disabled = true;
        statusWidget.size = [200, 20];
        return statusWidget;
    } catch (error) {
        console.error("❌ Failed to create status indicator:", error);
        return null;
    }
}

/**
 * 获取引导模板内容用于placeholder
 * @param {string} guidanceStyle - 引导风格
 * @param {string} guidanceTemplate - 引导模板
 * @returns {string} placeholder文本
 */
function getTemplateContentForPlaceholder(guidanceStyle, guidanceTemplate) {
    // 预设引导风格内容
    const presetGuidance = {
        "efficient_concise": {
            "name": "高效简洁模式",
            "prompt": "You are an efficient AI editor focused on clear, concise Flux Kontext instructions. Generate direct, actionable editing commands..."
        },
        "natural_creative": {
            "name": "自然创意模式",
            "prompt": "You are a creative AI assistant specializing in artistic image editing with Flux Kontext. Focus on natural expression and artistic enhancement..."
        },
        "technical_precise": {
            "name": "技术精确模式",
            "prompt": "You are a technical specialist for Flux Kontext image editing, focused on precision and accuracy. Generate technically precise, unambiguous editing instructions..."
        }
    };
    
    // 模板库内容
    const templateLibrary = {
        "ecommerce_product": {
            "name": "电商产品编辑",
            "prompt": "你是专业的电商产品图像编辑AI，专注于产品展示优化。保持产品真实性，避免过度修饰..."
        },
        "portrait_beauty": {
            "name": "人像美化编辑",
            "prompt": "你是专业人像摄影后期处理专家，专注于自然美化。保持人物自然神态，避免过度美颜..."
        },
        "creative_design": {
            "name": "创意设计编辑",
            "prompt": "你是富有创意的设计师AI，专长艺术化图像处理。大胆的色彩运用和视觉冲击..."
        },
        "architecture_photo": {
            "name": "建筑摄影编辑",
            "prompt": "你是专业建筑摄影后期专家，专注于建筑和空间美学。强调建筑线条和几何美感..."
        },
        "food_photography": {
            "name": "美食摄影编辑",
            "prompt": "你是专业美食摄影师，专注于食物的诱人呈现。突出食物的新鲜和诱人质感..."
        },
        "fashion_retail": {
            "name": "时尚零售编辑",
            "prompt": "你是时尚零售视觉专家，专注于服装和配饰的完美呈现。突出服装的版型和设计细节..."
        },
        "landscape_nature": {
            "name": "风景自然编辑",
            "prompt": "你是自然风光摄影专家，专注于大自然的美丽呈现。保持自然景色的真实感和美感..."
        }
    };
    
    try {
        // 根据guidance_style选择内容
        if (guidanceStyle === "custom") {
            // 自定义模式保留完整提示文字
            return `输入您的自定义AI引导指令...

例如：
你是专业的图像编辑专家，请将标注数据转换为简洁明了的编辑指令。重点关注：
1. 保持指令简洁
2. 确保操作精确
3. 维持风格一致性

更多示例请查看guidance_template选项。`;
        } else if (guidanceStyle === "template") {
            if (guidanceTemplate && guidanceTemplate !== "none" && templateLibrary[guidanceTemplate]) {
                const template = templateLibrary[guidanceTemplate];
                const preview = template.prompt.substring(0, 200).replace(/\n/g, ' ').trim();
                return `当前模板: ${template.name}\n\n${preview}...`;
            } else {
                return "选择一个模板后将在此显示预览...";
            }
        } else {
            // 显示预设风格的内容
            if (presetGuidance[guidanceStyle]) {
                const preset = presetGuidance[guidanceStyle];
                const preview = preset.prompt.substring(0, 200).replace(/\n/g, ' ').trim();
                return `当前风格: ${preset.name}\n\n${preview}...`;
            } else {
                return `输入您的自定义AI引导指令...

例如：
你是专业的图像编辑专家，请将标注数据转换为简洁明了的编辑指令。重点关注：
1. 保持指令简洁
2. 确保操作精确
3. 维持风格一致性

更多示例请查看guidance_template选项。`;
            }
        }
    } catch (error) {
        console.error("获取模板内容失败:", error);
        return `输入您的自定义AI引导指令...

例如：
你是专业的图像编辑专家，请将标注数据转换为简洁明了的编辑指令。重点关注：
1. 保持指令简洁
2. 确保操作精确
3. 维持风格一致性

更多示例请查看guidance_template选项。`;
    }
}

/**
 * 设置引导相关widgets的联动
 * @param {Object} node - ComfyUI节点实例
 * @param {Object} guidanceStyleWidget - 引导风格widget
 * @param {Object} guidanceTemplateWidget - 引导模板widget
 * @param {Object} customGuidanceWidget - 自定义引导widget
 */
function setupGuidanceWidgetsInteraction(node, guidanceStyleWidget, guidanceTemplateWidget, customGuidanceWidget) {
    if (!guidanceStyleWidget || !customGuidanceWidget) {
        console.warn("⚠️ 缺少必要的widgets，跳过placeholder联动设置");
        return;
    }
    
    console.log("🔧 开始设置引导widgets联动");
    
    // 更新placeholder的函数
    function updatePlaceholder() {
        try {
            const guidanceStyle = guidanceStyleWidget.value || "efficient_concise";
            const guidanceTemplate = guidanceTemplateWidget ? guidanceTemplateWidget.value || "none" : "none";
            
            console.log(`📝 准备更新placeholder: style=${guidanceStyle}, template=${guidanceTemplate}`);
            
            const newPlaceholder = getTemplateContentForPlaceholder(guidanceStyle, guidanceTemplate);
            
            // 多种方式尝试更新placeholder
            let updated = false;
            
            // 方法1: 直接更新inputEl
            if (customGuidanceWidget.inputEl) {
                customGuidanceWidget.inputEl.placeholder = newPlaceholder;
                updated = true;
                console.log("✅ 通过inputEl更新placeholder");
            }
            
            // 方法2: 更新widget的options
            if (customGuidanceWidget.options && customGuidanceWidget.options.placeholder !== undefined) {
                customGuidanceWidget.options.placeholder = newPlaceholder;
                updated = true;
                console.log("✅ 通过options更新placeholder");
            }
            
            // 方法3: 查找textarea元素
            if (!updated) {
                const textareas = node.widgets.filter(w => w.name === "custom_guidance");
                if (textareas.length > 0 && textareas[0].inputEl) {
                    textareas[0].inputEl.placeholder = newPlaceholder;
                    updated = true;
                    console.log("✅ 通过直接查找更新placeholder");
                }
            }
            
            // 方法4: 强制重绘widget
            if (customGuidanceWidget.onRemoved && customGuidanceWidget.onAdded) {
                try {
                    customGuidanceWidget.options = customGuidanceWidget.options || {};
                    customGuidanceWidget.options.placeholder = newPlaceholder;
                    // 触发重绘
                    node.onResize && node.onResize();
                    updated = true;
                    console.log("✅ 通过重绘更新placeholder");
                } catch (e) {
                    console.log("⚠️ 重绘方法失败:", e);
                }
            }
            
            if (updated) {
                console.log(`🎨 成功更新placeholder: ${guidanceStyle} -> ${guidanceTemplate}`);
                console.log(`📄 新placeholder内容: ${newPlaceholder.substring(0, 50)}...`);
            } else {
                console.warn("❌ 所有placeholder更新方法都失败了");
            }
            
        } catch (error) {
            console.error("❌ updatePlaceholder错误:", error);
        }
    }
    
    // 更强健的事件绑定
    function bindWidgetCallback(widget, widgetName) {
        if (!widget) {
            console.warn(`⚠️ Ollama版本${widgetName} widget为空，跳过绑定`);
            return;
        }
        
        console.log(`🔗 Ollama版本绑定${widgetName}事件回调`);
        console.log(`   Widget类型: ${widget.type}, 当前值: ${widget.value}`);
        
        // 保存原始callback
        const originalCallback = widget.callback;
        console.log(`   原始callback存在: ${!!originalCallback}`);
        
        // 设置新的callback
        widget.callback = function(value, ...args) {
            console.log(`🎯 Ollama版本${widgetName}值变化: ${value} (参数数量: ${args.length})`);
            
            // 先调用原始callback
            if (originalCallback) {
                try {
                    originalCallback.apply(this, [value, ...args]);
                    console.log(`   ✅ 原始${widgetName}回调执行成功`);
                } catch (e) {
                    console.warn(`⚠️ Ollama版本原始${widgetName}回调错误:`, e);
                }
            }
            
            // 延迟更新placeholder，确保值已经设置
            console.log(`   🔄 准备延迟更新placeholder (${widgetName})`);
            setTimeout(updatePlaceholder, 100);
        };
        
        // 尝试多种事件监听方式
        if (widget.element) {
            console.log(`   📱 ${widgetName} DOM元素存在，添加事件监听`);
            
            // change事件
            widget.element.addEventListener('change', (e) => {
                console.log(`🎯 Ollama版本${widgetName}元素change事件, 新值: ${e.target.value}`);
                setTimeout(updatePlaceholder, 100);
            });
            
            // input事件
            widget.element.addEventListener('input', (e) => {
                console.log(`🎯 Ollama版本${widgetName}元素input事件, 新值: ${e.target.value}`);
                setTimeout(updatePlaceholder, 100);
            });
            
            // click事件（用于下拉框）
            widget.element.addEventListener('click', (e) => {
                console.log(`🎯 Ollama版本${widgetName}元素click事件`);
                setTimeout(updatePlaceholder, 200); // 稍长延迟确保值已更改
            });
        } else {
            console.warn(`⚠️ Ollama版本${widgetName} DOM元素不存在`);
        }
        
        // 尝试直接监听widget的属性变化
        if (widget.value !== undefined) {
            let lastValue = widget.value;
            const checkValueChange = () => {
                if (widget.value !== lastValue) {
                    console.log(`🎯 Ollama版本${widgetName}属性值变化: ${lastValue} → ${widget.value}`);
                    lastValue = widget.value;
                    updatePlaceholder();
                }
            };
            
            // 定期检查值变化
            setInterval(checkValueChange, 500);
            console.log(`   ⏰ ${widgetName}定期值检查已设置`);
        }
    }
    
    // 绑定事件
    bindWidgetCallback(guidanceStyleWidget, "guidance_style");
    bindWidgetCallback(guidanceTemplateWidget, "guidance_template");
    
    // 延迟初始化，确保所有widgets都已完全加载
    setTimeout(() => {
        console.log("🚀 初始化placeholder");
        updatePlaceholder();
    }, 1000);
    
    // 添加定期检查机制，确保placeholder保持同步
    let checkCount = 0;
    const checkInterval = setInterval(() => {
        checkCount++;
        if (checkCount > 10) {
            clearInterval(checkInterval);
            return;
        }
        
        // 检查当前placeholder是否正确
        const currentStyle = guidanceStyleWidget.value || "efficient_concise";
        const currentTemplate = guidanceTemplateWidget ? guidanceTemplateWidget.value || "none" : "none";
        const expectedPlaceholder = getTemplateContentForPlaceholder(currentStyle, currentTemplate);
        
        if (customGuidanceWidget.inputEl) {
            const currentPlaceholder = customGuidanceWidget.inputEl.placeholder;
            if (currentPlaceholder !== expectedPlaceholder) {
                console.log(`🔄 定期检查发现placeholder不同步，正在更新 (检查${checkCount}/10)`);
                updatePlaceholder();
            }
        }
    }, 2000);
}

// 注册ComfyUI扩展
app.registerExtension({
    name: "KontextOllamaFluxEnhancer",
    
    async beforeRegisterNodeDef(nodeType, nodeData, app) {
        // 只处理OllamaFluxKontextEnhancer节点 (注意V2版本)
        if (nodeData.name !== "OllamaFluxKontextEnhancerV2") {
            return;
        }
        
        console.log("🔧 初始化OllamaFluxKontextEnhancer前端扩展");
        
        // 重写节点创建方法
        const onNodeCreated = nodeType.prototype.onNodeCreated;
        nodeType.prototype.onNodeCreated = function() {
            // 调用原始创建方法
            if (onNodeCreated) {
                onNodeCreated.apply(this, arguments);
            }
            
            console.log("🏗️ 创建OllamaFluxKontextEnhancerV2节点");
            
            // 查找相关widgets
            let modelWidget = null;
            let urlWidget = null;
            let guidanceStyleWidget = null;
            let guidanceTemplateWidget = null;
            let customGuidanceWidget = null;
            
            for (const widget of this.widgets) {
                if (widget.name === "model") {
                    modelWidget = widget;
                    console.log("🎯 找到模型选择widget");
                } else if (widget.name === "url") {
                    urlWidget = widget;
                    console.log("🔗 找到URL输入widget");
                } else if (widget.name === "guidance_style") {
                    guidanceStyleWidget = widget;
                    console.log("🎨 找到引导风格widget");
                } else if (widget.name === "guidance_template") {
                    guidanceTemplateWidget = widget;
                    console.log("📋 找到引导模板widget");
                } else if (widget.name === "custom_guidance") {
                    customGuidanceWidget = widget;
                    console.log("✏️ 找到自定义引导widget");
                }
            }
            
            // 添加刷新按钮
            if (modelWidget) {
                const refreshButton = createRefreshButton(this, modelWidget, urlWidget);
                if (refreshButton) {
                    console.log("✅ 模型刷新按钮已添加");
                }
                
                // 处理模型选择变化，支持刷新功能
                const originalCallback = modelWidget.callback;
                modelWidget.callback = function(value, ...args) {
                    // 如果选择了刷新选项，触发刷新
                    if (value === "🔄 Refresh model list" || value === "🔄 刷新模型列表") {
                        refreshModels(this.node || this, modelWidget, urlWidget);
                        return;
                    }
                    
                    // 否则调用原始回调
                    if (originalCallback) {
                        originalCallback.apply(this, [value, ...args]);
                    }
                };
                
                console.log("✅ OllamaFluxKontextEnhancerV2前端扩展初始化完成");
            } else {
                console.warn("⚠️ 未找到模型选择widget");
            }
            
            // 设置引导widgets联动
            if (guidanceStyleWidget && customGuidanceWidget) {
                setupGuidanceWidgetsInteraction(this, guidanceStyleWidget, guidanceTemplateWidget, customGuidanceWidget);
                console.log("✅ 引导widgets联动设置完成");
            } else {
                console.warn("⚠️ 未找到引导相关widgets");
            }
        };
        
        // 添加节点序列化支持
        const onSerialize = nodeType.prototype.onSerialize;
        nodeType.prototype.onSerialize = function(o) {
            if (onSerialize) {
                onSerialize.apply(this, arguments);
            }
            
            // 保存当前选中的模型
            const modelWidget = this.widgets?.find(w => w.name === "model");
            if (modelWidget && modelWidget.value) {
                o.model_selection = modelWidget.value;
            }
        };
        
        // 添加节点反序列化支持
        const onConfigure = nodeType.prototype.onConfigure;
        nodeType.prototype.onConfigure = function(o) {
            if (onConfigure) {
                onConfigure.apply(this, arguments);
            }
            
            // 恢复模型选择
            if (o.model_selection) {
                const modelWidget = this.widgets?.find(w => w.name === "model");
                if (modelWidget) {
                    // 延迟恢复，确保模型列表已加载
                    setTimeout(() => {
                        if (modelWidget.options.values.includes(o.model_selection)) {
                            modelWidget.value = o.model_selection;
                        }
                    }, 2000);
                }
            }
        };
    },
    
    async setup() {
        console.log("🚀 OllamaFluxKontextEnhancerV2扩展加载完成");
    }
});

// 导出工具函数供其他模块使用
export {
    fetchOllamaModels,
    updateModelWidget,
    createRefreshButton,
    createStatusIndicator
};